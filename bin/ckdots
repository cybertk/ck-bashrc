#!/usr/bin/env bash

set -e
# dot vs dotfile
#  - dot is .vimrc
#  - dotfile is path of .vimrc, i.e. ~/.vimrc

_DEFAULT_FILES=""
_DOTS_IGNORED=(.DS_Store .ckdots/)

install_profile() {
    declare profile="$1" root_dir="$2" config_dir="$3"

    echo "==> Installing profile $profile"
    cat >"$profile" <<EOF
#!/bin/sh

# NOTE: Do **NOT** edit this file.
#       This file is automated generated by ckdots
#       See more on https://github.com/cybertk/ck-dots

CKDOTS_ROOT="$root_dir"
CKDOTS_CONFIG="$config_dir"
. \${CKDOTS_ROOT}/profile
EOF
}

# Install one dotfile($1) to $HOME
install_dot_file() {
    local dot_file="$1" dest_dir="$2"

    echo "==> Installing dotfile $dot_file"
    ln -sf "$dot_file" "$dest_dir/$(basename "$dot_file")"
}

init_config_dir() {
    declare config_dir="$1" template_dir="$2"

    mkdir -p "$config_dir"

    mkdir "$config_dir/dots"
    mkdir "$config_dir/backup"
    cp -r "$template_dir" "$config_dir"
}

init() {
    local root_dir config_dir dots shells

    script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
    config_dir="${CKDOTS_CONFIG:-~/.ckdots}"

    if [[ ! -d "$config_dir" ]] && [[ ! -d "$(readlink "$config_dir")" ]]; then
        echo "==> Initialize config dir"
        init_config_dir "$config_dir" "$script_dir/templates/config/"
    fi

    shells=".bash_profile .bashrc"
    for shell in $shells; do
        backup_dot_file "$HOME/$shell" "$config_dir/backup/"
        install_profile "$HOME/$shell" "$script_dir" "$config_dir"
    done
}

usage() {
    echo "
Available commands:

   init              Init
   ls                List all saved dotfiles
   add               Add new dotfile
   checkout          Checkout saved dotfiles to HOME
   help              Print this help
"
}

# For \; vs +, see https://unix.stackexchange.com/a/12904/117184
list() {
    find "$CKDOTS_CONFIG/dots" -name ".*" -d 1 -exec basename {} \;
}

list_dots_user() {
    status_find_dots "$HOME"
}

list_dots_ignored() {
    printf '%s\n' "${_DOTS_IGNORED[@]}" | sort
}

list_dots_tracked() {
    status_find_dots "$CKDOTS_CONFIG/dots"
}

list_dots_untracked() {
    local dots

    dots=( $(comm -23 <(list_dots_user) <(list_dots_tracked)) )
    dots=( $(comm -23 <(printf '%s\n' "${dots[@]}") <(list_dots_ignored)) )

    printf '%s\n' "${dots[@]}"
}

add_save_dot_file() {
    declare dot="$1"

    echo "==> Saving $dot"
    mv "$HOME/$dot" "$CKDOTS_CONFIG/dots"
}

add() {
    declare dot="$1"

    # Add all user's dotfiles
    if [[ "$dot" = "--all" ]]; then
        for d in $(list_dots_untracked); do
            add_save_dot_file "$d"
            install_dot_file "$CKDOTS_CONFIG/dots/$d" "$HOME"
        done
        return
    fi

    echo hi
    dot="$(basename "$dot")"
    if [[ ! -e "$HOME/$dot" ]]; then
        echo "Error: $HOME/$dot is not exist"
        return
    fi

    add_save_dot_file "$dot"
    install_dot_file "$CKDOTS_CONFIG/dots/$dot" "$HOME"
}

status_print_dots() {
    declare dots="$1"

    for dot in $dots; do
        printf "\t%s\n" "$dot"
    done
}

# Find all dotfiles under $1 and sorted lexically
status_find_dots() {
    declare path="$1"

    local dots_found
    local dots

    dots_found="$(find "$path" -maxdepth 1 -name ".*")"
    for dot in $dots_found; do
        if [[ -d "$dot" ]]; then
            dots+=("$(basename "$dot")/")
        else
            dots+=("$(basename "$dot")")
        fi
    done

    # Sort lexically
    printf '%s\n' "${dots[@]}" | sort
}

status() {
    echo 'Tracked dots:'
    for dot in $(list_dots_tracked); do
        if [[ "$(readlink "$HOME/${dot/\//}")" != "$CKDOTS_CONFIG/dots/$dot" ]]; then
            printf "\tun-checkout: %s\n" "$dot"
        else
            printf "\t%s\n" "$dot"
        fi
    done
    echo '
Untracked dots:
  (use "ckdots add <file>..." to include in what will be managed)
'
    status_print_dots "$(list_dots_untracked)"
    echo '
Ignored files:
  (use "ckdots add <file>..." to include in what will be committed)
'
    status_print_dots "$(list_dots_ignored)"
}

backup_dot_file() {
    declare dot_file="$1" backup_dir="$2"
    local dest_file

    # Skiping if file un-exist
    if [[ ! -e "$dot_file" ]]; then
        echo "Skip backing up "$dot_file
        return
    fi

    dest_file="$backup_dir/$(basename "$dot_file").$(date "+%Y%m%d-%H%M%S")"

    mv "$dot_file" "$dest_file"
}

checkout_dot() {
    declare dot="$1"

    backup_dot_file "$HOME/$dot" "$CKDOTS_CONFIG/backup/"
    install_dot_file "$CKDOTS_CONFIG/dots/$dot" "$HOME/"
}

checkout() {
    declare dot="$1"

    dot="$(basename "$dot")"

    if [[ -z "$dot" ]]; then
        local dots_tracked="$(status_find_dots "$CKDOTS_CONFIG/dots")"
    for d in $dots_tracked; do
        checkout_dot "$d"
    done
    else
        checkout_dot "$dot"
    fi
}

main() {

    if [[ -z "$1" ]] || [[ "$1" = help ]] || [[ "$1" = "-h" ]] || [[ "$1" = "--help" ]]; then
        usage
    elif [[ "$1" = init ]]; then
        init
    elif [[ "$1" = ls ]] || [[ "$1" = list ]]; then
        list
    elif [[ "$1" = add ]] && [ $# -gt 1 ]; then
        shift 1
        add "$@"
    elif [[ "$1" = checkout ]]; then
        shift 1
        checkout "$@"
    elif [[ "$1" = status ]]; then
        status
    else
        usage
    fi
}

main "$@"
